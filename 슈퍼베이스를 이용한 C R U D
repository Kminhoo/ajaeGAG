슈퍼 베이스를 이용하여 C R U D 하기

import { createClient } from "@supabase/supabase-js";
// 본인 것 사용하기
const supabaseUrl = "https://flbaynnqwzzeweliqljp.supabase.co";
// vite에서 env 사용하는 법
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZsYmF5bm5xd3p6ZXdlbGlxbGpwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzE5MTA1MDAsImV4cCI6MjA0NzQ4NjUwMH0.mmsWEYRFehZLotB8v8OcIuzX8vR2gynr1sD3q47wf5U";
const supabase = createClient(supabaseUrl, supabaseKey);

export default supabase

슈퍼베이스를 이용하려면 내 vs코드와 슈퍼베이스를 연결해야만한다
연결하는법은 슈퍼베이스 셋팅에 aip부분에 링크와 키값을 가지고와 
폴더를 만들고 위와같이 연결해준다.

키암호화
VITE_SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZsYmF5bm5xd3p6ZXdlbGlxbGpwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzE5MTA1MDAsImV4cCI6MjA0NzQ4NjUwMH0.mmsWEYRFehZLotB8v8OcIuzX8vR2gynr1sD3q47wf5U"
하지만 배포시 키가 노출되기에 상위폴더에 .env 파일을 만들어 위와같이 넣어준다.

-앱작스 시작!
const 구성 만들기
 const [countries, setCountries] = useState([]);
  // input에 입력한 값을 저장하는 state
  const [countryName, setCountryName] = useState("");
  const [population, setPopulation] = useState(0);
  // 수정 때 필요한 인구 입력 state
  const [editingPopulation, setEditingPopulation] = useState(0);
  // 수정할 국가 id
  const [editingId, setEditingId] = useState(null);


-유즈이팩트 시작
  useEffect(() => {
    const fetchCountries = async () => {
      const { data, error } = await supabase.from("countries").select("*");
      if (error) {
        return alert(error.message);
      }
      setCountries(data);
    };
    fetchCountries();
  }, []);
  리랜더링을 방지하기 위해 유즈이팩트사용
  위의 코드는 슈퍼베이스 파일중 컨트리즈에 접근해줘
  만약 에러가나면 알럿을 띄워줘
  그데이터를 셋 컨트리즈에 담아줘 그리고 그값이 페치컨트리즈야


  // 추가할 때 실행할 함수
  const handleSubmit = async (e) => {
    e.preventDefault();
    const { data, error } = await supabase
      .from("countries")
      .insert({ name: countryName, population })
      .select();
    if (error) {
      return alert(error.message);
    }
    setCountries([...countries, ...data]);
  };
  핸들서브밋을 눌렀을때 다시고침을 방지해주고
  슈퍼베이스에서 컨트리즈파일에 이름이 건트리즈네임과 퍼플레이션을 골라
  데이터에 넣어줘 
  그리고 에러가 날시 알럿을 띄우고
  셋 컨트리즈에 기존 컨트리즈와 데이터를 다시 포장해줘


// countryName state 변경 함수
  const handleCountryNameChange = (e) => {
    setCountryName(e.target.value);
  };
	// population state 변경 함수
  const handlePopulationChange = (e) => {
    setPopulation(e.target.value);
  };
  인풋값을 기억해서 버트누를시 이벤트를 줄거야 기억해!!




    // 수정
  const handleEditClick = (country) => {
    setEditingId(country.id);
    setEditingPopulation(country.population);
  }; 이걸 누르면 나라이름과 사람숫자를 넣어줘

  const handleCancelEdit = () => {
    setEditingId(null);
    setEditingPopulation(0);
  };이갈 누르면 국가는 없고 값은 0으로 불러와줘

  const handleEditPopulationChange = (e) => {
    setEditingPopulation(e.target.value);
  };쓰고있는 이값을 기억해

  const handleSaveEdit = async () => {
    const { data, error } = await supabase
      .from("countries")
      .update({ population: editingPopulation })
      .eq("id", editingId)
      .select();
    if (error) {
      return alert(error.message);
    }
    setCountries(
      countries.map((country) => (country.id === editingId ? data[0] : country))
    );
    setEditingId(null);
    setEditingPopulation(0);
  };
  슈퍼베이스에 컨트리즈에서 인구수를 변경할거야
  그리고 에러시 알럿을 띄우고
컨트리즈를 돌려 컨트리즈와 바뀐 아이디가 같으면 데이터를 수정하고 아니면 컨트리즈값을 그냥냅둬
셋에디팅아이디와과 세에디팅파플레이션은 0이야
그걸 센 컨트리즈에 담아줘
    



    // 삭제
  const handleDeleteClick = async (id) => {
    const { error } = await supabase.from("countries").delete().eq("id", id);
    if (error) {
      return alert(error.message);
    }
    setCountries(countries.filter((country) => country.id !== id));
  };
슈퍼베이스에 컨트리즈에 접근해서 아이디가같으면 삭제할거다
컨트리즈에 아이디가 고른아이디와 다른것들만 골라 셋컨트리즈에 담아줘



eturn (
    <>
    <h1>Countries</h1>
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={countryName}
        onChange={handleCountryNameChange}
        placeholder="국가 이름"
      />
      <input
        type="number"
        value={population}
        onChange={handlePopulationChange}
        placeholder="인구 수"
      />
      <button>추가</button>
    </form>
    <ul>
      {countries.map((country) => (
        <li key={country.id}>
          <div>이름: {country.name}</div>
          {editingId === country.id ? (
            <>
              <input
                type="number"
                value={editingPopulation}
                onChange={handleEditPopulationChange}
              />
              <button onClick={handleSaveEdit}>저장</button>
              <button onClick={handleCancelEdit}>취소</button>
            </>
          ) : (
            <>
              <div>인구: {country.population}</div>
              <button onClick={() => handleEditClick(country)}>수정</button>
              <button onClick={() => handleDeleteClick(country.id)}>
                  삭제
                </button>
            </>
          )}
        </li>
      ))}
    </ul>
  </>
);
}

export default App;
